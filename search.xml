<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>hexo开博小坑</title>
      <link href="/2018/06/27/hexo%E5%BC%80%E5%8D%9A%E5%B0%8F%E5%9D%91/"/>
      <url>/2018/06/27/hexo%E5%BC%80%E5%8D%9A%E5%B0%8F%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>在本地安装完hexo，设置_config.yml之后，将hexo同步到github时，一直报错，报错信息如下：<br><img src="/images/hexo安装小坑/hexo安装小坑1.png" alt="hexo安装小坑"><br>百度了好久为什么会这样，后来发现是自己眼瞎，百度出来的文章明明写着<br><img src="/images/hexo安装小坑/hexo安装小坑3.jpg" alt="hexo安装小坑"><br>所以配置的_config.yml文件应该是<br><img src="/images/hexo安装小坑/hexo安装小坑2.png" alt="hexo安装小坑"></p><p><font color="red"><strong>扩展</strong>：</font>至于为什么需要在冒号后加空白符呢？这是因为yaml文件的语法的规定<br>每个冒号后面一定要有一个空格（以冒号结尾不需要空格，表示文件路径的模版可以不需要空格），这里指的是键值对，例如：mykey: my_value</p><p><strong>日常啰嗦</strong>：为了顺应潮流，想开博的心思已经不能再耽搁了。本来想在阿里云服务器上搭建博客的，奈何自己不太懂服务器的知识（怪自己上课没认真听讲，不过我觉得学校讲的知识应该也是不足以支撑实践的，不要拆穿我，这是给自己的安慰=.=），捣鼓了几天，还是没捣鼓出来，我这暴脾气一下子就上来了，我一定要征服你。所以又捣鼓了几天，果然理想和现实是有差距的，这差距真特么地烦人，所以我就华丽丽地放弃了哈哈。那这样不行我们就下降标准吧，所以就有了这个hexo+github的博客。</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>vue2.0+node.js+MongoDB全栈打造商城</title>
      <link href="/2018/06/24/vue2-0-node-js-MongoDB%E5%85%A8%E6%A0%88%E6%89%93%E9%80%A0%E5%95%86%E5%9F%8E/"/>
      <url>/2018/06/24/vue2-0-node-js-MongoDB%E5%85%A8%E6%A0%88%E6%89%93%E9%80%A0%E5%95%86%E5%9F%8E/</url>
      <content type="html"><![CDATA[<p>github地址：</p>]]></content>
      
      <categories>
          
          <category> vue2.0+node.js+MongoDB全栈打造商城 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>记github的使用</title>
      <link href="/2018/06/12/%E8%AE%B0github%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/06/12/%E8%AE%B0github%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="git-的配置信息"><a href="#git-的配置信息" class="headerlink" title="git 的配置信息"></a>git 的配置信息</h1><p>获取并设置存储库或全局选项 git config </p><p>config 配置三个级别：<br>system级别 global（用户级别） 和local（当前仓库）<br>local&gt;global&gt;system </p><a id="more"></a><p>想了解 Git 的各式工具该怎么用，可以阅读它们的使用帮助，方法有三：<br>git XXX –help / git help XXX / man git-XXX<br>例如：git config –help</p><p><strong>git配置的增删改查</strong><br>增：git config –global user.name XXX<br>git config –global <strong>–add</strong> user.name XXX<br>改：git config –global user.mane XXX2<br>删：git config –global <strong>–unset</strong> user.name<br>查：git config <strong>–get</strong> user.name<br>git config user.name</p><p>检查已有的配置信息git config –global –list </p><p><strong>为git子命令配置别名</strong>：git config –global alias.co cheskout</p><h1 id="git-的基本工作流程"><a href="#git-的基本工作流程" class="headerlink" title="git 的基本工作流程"></a>git 的基本工作流程</h1><p>git使用40个16进制字符的HASH来唯一标识对象</p><p><strong>对象分为4种</strong><br>blob:用来存储文件内容， 或者说表示一个文件。例如：文本文件，二进制文件，链接文件<br>tree:目录<br>commit:历史提交<br>tag:标签，commit的别名。指向固定的历史提交<br>关系：tag-&gt;commit-&gt;tree(可包含其他的tree对象)-&gt;blob<br>git只关心文件的内容，若两份文件的内容相同，则会指向同一个blob对象，文件名或者其他信息会存储在tree对象里</p><p><strong>创建仓库</strong><br><strong>git仓库分两种：</strong><br>一种为裸仓库，不带工作区，通常用于服务器中和其他用户方便协作（没有.git的目录）<br>$ git init –bare XXX<br>一种是本地仓库，会自动创建.git目录<br>$ git init 仓库名字<br>已经有的环境把他纳入git的管理 进入这个文件夹，在这里执行git init命令<br>获得git仓库 需要一个远程仓库的地址<br>$ git clone &lt;版本库的网址&gt;<br>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。<br>$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</p><p><strong>git仓库有3个工作区域 </strong><br>工作区–日常编辑代码的地方，维护着树形结构<br>暂存区–需要提交的工作状态，维护着虚拟的树型结构，代表了下一次提交内容的整体<br>历史仓库–commit指向的树形结构</p><p><strong>添加操作</strong><br>$ git add <em>path</em> 将修改添加到暂存区,也就是将要提交的文件的信息添加到索引库中。<em>path</em>可以是文件也可以是目录。<br>$ git add . 或者 $ git add -A 将所有修改添加到暂存区<br>$ git states 查看工作区和暂存区的区别</p><p><strong>删除操作</strong><br>$ git rm a 同时把工作区和暂存区里面的a引用删掉<br>$ git rm –cached a 只删除暂存区里的文件</p><p>未被Git跟踪的状态为<em>unstage</em>状态（存放在暂存区的文件）<br>已经被Git跟踪的状态为<em>stage</em>状态，因此包括<em>staging</em>状态状态和<em>staged</em>状态<br><em>untrack files</em>是指尚未被git所管理的文件；<br><em>changed but not updated</em>是指文件被git管理，并且发生了改变，但改动还没被git管理；<br>这两种状态，都可以看成是改动还没被git管理的状态，我们这里称非stage状态。<br><em>changes to be commited</em>是指进入stage状态的文件，stage是commit和未管理之间的一个状态，也有别名叫index状态，也就是git已经管理了这些改动，但是还没完成提交。<br>.gitignore中的文件，不会出现在以上三个状态中。</p><p><strong>撤销操作</strong><br>$ git checkout file 命令用于切换分支或恢复工作树文件<br>$ git reset HEAD file  回退文件，将文件从暂存区回退到工作区<br>$ git reset HEAD^ ：回退版本，一个^表示一个版本，可以多个，另外也可以使用$ git reset HEAD～n这种形式</p><p><strong>移动操作</strong><br>$ git mv oldname newnae 工作区中重命名文件，移动文件<br>git实际上并没有重命名移动的说法，是一系列操作的组合<br>在工作区中，把你需要的文件重命名和移动，在暂存区里把原有的文件删除了，在把新的文件添加进暂存区</p><p><strong>.gitignore文件</strong><br>*.[oa] 匹配以o或者a结尾的文件<br>*~ 匹配有~的文件<br>*.pyc 匹配所有以pyc为扩展名的文件<br>!test.pyc test.pyc文件不被忽略<br>\!test.pyc 若原来文件名是以！开头的需要转义符号<br>foo/ 匹配foo文件夹（foo文件不被匹配）<br>**/res **/意味着匹配0个或者多个目录，顶层文件的res会被匹配到，其他目录下的子目录的res也会被匹配到</p><p>在工作区的顶层目录下或者你需要的位置下创建.gitignore文件<br>工作区里面一些不希望被添加到暂存区和历史上的文件不被添加进去</p><p><strong>添加到历史仓库</strong><br>git commit -m “xxx”</p>]]></content>
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
